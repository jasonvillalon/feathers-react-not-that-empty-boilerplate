const debug = require('debug')('server:app');
const path = require('path');
const favicon = require('serve-favicon');
const compress = require('compression');
const config = require('config');
const cors = require('cors');
const helmet = require('helmet');
const bodyParser = require('body-parser');

const feathers = require('feathers');
const configuration = require('feathers-configuration');
const hooks = require('feathers-hooks');
const rest = require('feathers-rest');
const socketio = require('feathers-socketio');

const middleware = require('./middleware');
const services = require('./services');
const appHooks = require('./app.hooks');

const authentication = require('./authentication');

const postgres = require('./postgres');

const app = feathers();

// Load app configuration
app.configure(configuration(path.join(__dirname, '..')));
// Enable CORS, security, compression, favicon and body parsing
app.use(cors());
app.use(helmet());
app.use(compress());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(favicon(path.join(app.get('public'), 'favicon.ico')));
// Load app
app.get('/', serveHtmlForEnvironment); // for '/' only

// Server static files
app.use('/', feathers.static('public'));
app.use('/', feathers.static('public/dist')); // assets generated by webpack

// Routing for app. Load app; the client will handle rest of the routing.
app.use(config.client.defaultRoute, serveHtmlForEnvironment); // default is '/app ...'
app.use('/user', serveHtmlForEnvironment); // for '/user ...'

// Set up Plugins and providers
app.configure(hooks());
app.configure(postgres);
app.configure(rest());
app.configure(socketio());

app.configure(authentication);

// Set up our services (see `services/index.js`)
app.configure(services);
// Configure middleware (see `middleware/index.js`) - always has to be last
app.configure(middleware);
app.hooks(appHooks);

module.exports = app;

// Helpers

function serveHtmlForEnvironment(req, res) {
  var html; // eslint-disable-line no-var

  switch (config.NODE_ENV) {
    case 'devserver':
      html = './index.html';
      break;
    case 'production': // fall through
    case 'development': // fall through
    default:
      html = path.join('.', 'dist', 'index.html');
  }

  debug(`Serve file ${html} in ${config.NODE_ENV}`);
  res.sendFile(html, { root: config.server.publicPath });
}
